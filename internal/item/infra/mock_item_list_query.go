// Code generated by MockGen. DO NOT EDIT.
// Source: item_list_query.go

// Package infra is a generated GoMock package.
package infra

import (
	domain "char5742/ecsite-sample/internal/item/domain"
	db "char5742/ecsite-sample/pkg/db"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockItemListQuery is a mock of ItemListQuery interface.
type MockItemListQuery struct {
	ctrl     *gomock.Controller
	recorder *MockItemListQueryMockRecorder
}

// MockItemListQueryMockRecorder is the mock recorder for MockItemListQuery.
type MockItemListQueryMockRecorder struct {
	mock *MockItemListQuery
}

// NewMockItemListQuery creates a new mock instance.
func NewMockItemListQuery(ctrl *gomock.Controller) *MockItemListQuery {
	mock := &MockItemListQuery{ctrl: ctrl}
	mock.recorder = &MockItemListQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemListQuery) EXPECT() *MockItemListQueryMockRecorder {
	return m.recorder
}

// ItemList mocks base method.
func (m *MockItemListQuery) ItemList(ctx context.Context, tx db.TX) ([]domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ItemList", ctx, tx)
	ret0, _ := ret[0].([]domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ItemList indicates an expected call of ItemList.
func (mr *MockItemListQueryMockRecorder) ItemList(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ItemList", reflect.TypeOf((*MockItemListQuery)(nil).ItemList), ctx, tx)
}

// ItemListByCondition mocks base method.
func (m *MockItemListQuery) ItemListByCondition(ctx context.Context, tx db.TX, condition ItemListCondition) ([]domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ItemListByCondition", ctx, tx, condition)
	ret0, _ := ret[0].([]domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ItemListByCondition indicates an expected call of ItemListByCondition.
func (mr *MockItemListQueryMockRecorder) ItemListByCondition(ctx, tx, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ItemListByCondition", reflect.TypeOf((*MockItemListQuery)(nil).ItemListByCondition), ctx, tx, condition)
}
