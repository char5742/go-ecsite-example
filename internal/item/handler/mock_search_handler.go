// Code generated by MockGen. DO NOT EDIT.
// Source: search_handler.go

// Package handler is a generated GoMock package.
package handler

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockItemListSearchHandler is a mock of ItemListSearchHandler interface.
type MockItemListSearchHandler struct {
	ctrl     *gomock.Controller
	recorder *MockItemListSearchHandlerMockRecorder
}

// MockItemListSearchHandlerMockRecorder is the mock recorder for MockItemListSearchHandler.
type MockItemListSearchHandlerMockRecorder struct {
	mock *MockItemListSearchHandler
}

// NewMockItemListSearchHandler creates a new mock instance.
func NewMockItemListSearchHandler(ctrl *gomock.Controller) *MockItemListSearchHandler {
	mock := &MockItemListSearchHandler{ctrl: ctrl}
	mock.recorder = &MockItemListSearchHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemListSearchHandler) EXPECT() *MockItemListSearchHandlerMockRecorder {
	return m.recorder
}

// Handler mocks base method.
func (m *MockItemListSearchHandler) Handler(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Handler", w, r)
}

// Handler indicates an expected call of Handler.
func (mr *MockItemListSearchHandlerMockRecorder) Handler(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockItemListSearchHandler)(nil).Handler), w, r)
}
